# Intro to Rails

# History!
# Created by David Heinemeier Hansson for Basecamp and 37 signals, which was then extracted and became the Rails framework 
# We're now on version XXX (look up latest version ;-) 
# It's based on three major principles: Keep it Ruby, Keep it MVC<, and keep programmers happy
# How do we do that? By CONVENTION OVER CONFIGURATION
# What does that mean? Less time on annoying setup things, and more time on the things that matter, like writing actual code, and not the framework behind the code! 
# Usually at this point I'll show them the Rails guides, and the API dock as resources


# now write some code!

gem install rails #they should already have it, but if they don't, they need it

rails --help

# look at rails new syntax, and how that works very similarly to corneal new

rails new whateveryourappnameis # usually pass in the -T flag for no test framework

# run through files created, explain

rails g --help

# generators for controllers, models, migrations, and scaffolds
# you CAN use scaffolds, but not right now. BUT right now I'm going to use it just to exemplify the power of rails. We'll come back to scaffolding once you understand exactly how Rails works, in the JS section when we're building Rails APIs. I promise I'll set you free! But first you have to learn how. :-)

rails g scaffold name_of_resource name_of_attribute:type #unless string, explain defaults here for the first time, you'll have to go over it multiple times

# Other callouts: no ones uses coffee script, scss is compiled css, use rails db:migrate now

# Once you have your scaffold generated BUT BEFORE YOU RUN THROUGH THE FILE STRUCTURE, start your server, and go to the index page

# Show that basically, you built their Sinatra project without the relationship

# Go into the code and show what was generated by the scaffolding. Run through it and talk about the similarities and differences vs sinatra. 
    # We're inheriting from ApplicationRecord, not directly from ActiveRecord::Base in our Models. It's to maintain the purity of ActiveRecord so in case we mistakenly overwrite one of the methods built in to ActiveRecord, it still exists. 
    # Our routes no longer happen in our controllers! We now have a route file. Demo a manual route
    get '/headphones', to: 'headphones#index'

# Build without scaffolding!, potentially user model
rails g model --help
# create model --no-test-framework
# check migration
# run migration
rails g controller --help
# remember controllers are plural!!!
# pass in the no test framework here too --no-test-framework

# show Rails console
# add in faker gem, bundle
# add in some seeds

User.create(username: some faker thing, other fields go here)

# if you have time add in relationships, show how the rails belongs_to macro works
